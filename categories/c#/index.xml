<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C# on 은경&#39;s Devlog</title>
        <link>https://example.com/categories/c%23/</link>
        <description>Recent content in C# on 은경&#39;s Devlog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-KR</language>
        <copyright>이은경</copyright>
        <lastBuildDate>Mon, 11 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/c%23/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>async와 await를 사용한 비동기 프로그래밍</title>
        <link>https://example.com/p/async%EC%99%80-await%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
        <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/async%EC%99%80-await%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
        <description>&lt;p&gt;I/O 바인딩되어 오래 걸리는 작업을 수행해야 하는 경우나 큰 계산을 수행하는 것과 같이 CPU 바인딩된 작업이 존재하는 경우에는 비동기 프로그래밍을 사용한다. C#에서는 따로 콜백 함수를 지정하지 않고도 비동기 프로그래밍이 가능하다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;비동기-프로그래밍&#34;&gt;비동기 프로그래밍
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Task&lt;/code&gt;나 &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; 개체로 비동기 프로그래밍이 가능하다. 이 개체들은 &lt;code&gt;async&lt;/code&gt; 한정자 또는 &lt;code&gt;await&lt;/code&gt; 연산자를 통해 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;async-한정자&#34;&gt;async 한정자
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;async&lt;/code&gt;는 메서드를 &lt;code&gt;await&lt;/code&gt;를 사용할 수 있는 비동기 메서드로 변환해준다.&lt;br&gt;
I/O 바인딩된 코드에서는 &lt;code&gt;async&lt;/code&gt; 메서드의 내부에서 &lt;code&gt;Task&lt;/code&gt; 또는 &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; 개체의 반환을 기다린다. 작업이 완료될 때까지 기다리지 않는 메서드라면 void로 선언한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Task&lt;/code&gt; 또는 &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; 형식의 메소드&lt;br&gt;
- &lt;code&gt;await&lt;/code&gt; 연산자의 위치에 도달하면 호출자에게 제어를 돌려준다.&lt;br&gt;
=&amp;gt; &lt;code&gt;await&lt;/code&gt; 연산자를 찾지 못하면 동기로 실행된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 형식의 메소드&lt;br&gt;
- 메서드 호출 즉시 호출자에게 제어를 돌려준다.&lt;br&gt;
- &lt;code&gt;await&lt;/code&gt; 연산자를 찾지 못해도 비동기적으로 실행된다.&lt;br&gt;
=&amp;gt; &lt;code&gt;async&lt;/code&gt; 하나만으로 비동기 처리가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CPU 바인딩된 코드에서는 &lt;code&gt;Task.Run&lt;/code&gt; 메서드로 작업이 백그라운드 스레드에서 시작되기를 기다린다.&lt;/p&gt;
&lt;h3 id=&#34;await-연산자&#34;&gt;await 연산자
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;await&lt;/code&gt;는 비동기 메서드 내부에서만 사용할 수 있다. &lt;code&gt;await&lt;/code&gt;를 수행한 메서드의 호출자에게 제어를 넘김으로서 UI를 부드럽게 만들어준다. 컴파일러가 await에 도달할 때 실행을 양도하고, 백그라운드 작업이 완료될 때 다시 실행하는 시스템으로 변환되는데, 이론적으로 &lt;code&gt;promise&lt;/code&gt;와 같은 원리이다.&lt;/p&gt;
&lt;h3 id=&#34;사용-예제&#34;&gt;&lt;strong&gt;사용 예제&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AsyncMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 작업 내용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Thread.Sleep()의 비동기 버전&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이 코드에서 정의된 메서드를 호출하면 호출자의 제어가 &lt;code&gt;AsyncMethod()&lt;/code&gt;로 이동하고, &lt;code&gt;await&lt;/code&gt;에 도달하면 다시 호출자로 제어가 이동한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;io-binding-vs-cpu-binding&#34;&gt;I/O binding vs CPU binding
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;코드가 DB의 데이터와 같은 무엇인가를 기다린다 → I/O 바인딩 작업&lt;br&gt;
코드가 비용이 높은 계산을 수행한다 → CPU 바인딩 작업&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;I/O 바인딩된 작업을 비동기 처리하는 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Task.Run&lt;/code&gt; 없이 &lt;code&gt;async&lt;/code&gt; 및 &lt;code&gt;await&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CPU에 바인딩되어 있는 작업을 비동기 처리하는 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 &lt;code&gt;async&lt;/code&gt; 스레드에서 &lt;code&gt;Task.Run&lt;/code&gt; 메서드를 사용하여 해당 작업을 백그라운드 스레드에서 시작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-참고-&#34;&gt;[ 참고 ]
&lt;/h2&gt;&lt;p&gt;[&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ko-kr/dotnet/csharp/asynchronous-programming/async-scenarios&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft 비동기 프로그래밍 시나리오&lt;/a&gt;]&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
